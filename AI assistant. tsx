import { useState, useRef, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { askAIAssistant, AIResponse } from "@/lib/openai";

type MessageType = {
  id: string;
  content: string;
  timestamp: string;
  isUser: boolean;
};

export default function AIAssistant() {
  const [messages, setMessages] = useState<MessageType[]>([
    {
      id: "1",
      content: "Hello! I noticed your blood pressure is slightly elevated. Would you like some tips to help manage it?",
      timestamp: "10:15 AM",
      isUser: false,
    }
  ]);
  const [newMessage, setNewMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    // Add user message
    const userMessage: MessageType = {
      id: Date.now().toString(),
      content: newMessage,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      isUser: true,
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setNewMessage("");
    setIsLoading(true);

    try {
      // Send to AI and get response
      const aiResponse = await askAIAssistant(newMessage);
      
      // Add AI response
      const aiMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        content: aiResponse.message,
        timestamp: aiResponse.timestamp,
        isUser: false,
      };
      
      setMessages((prev) => [...prev, aiMessage]);
    } catch (error) {
      console.error("Error sending message to AI:", error);
      // Add error message
      const errorMessage: MessageType = {
        id: (Date.now() + 1).toString(),
        content: "I'm sorry, I couldn't process your request. Please try again later.",
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        isUser: false,
      };
      
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="bg-white rounded-xl shadow-sm overflow-hidden">
      <div className="bg-primary text-white p-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span className="material-icons">smart_toy</span>
          <h2 className="text-lg font-medium">AI Health Assistant</h2>
        </div>
        <span className="text-xs bg-white/20 px-2 py-0.5 rounded-full">24/7 Support</span>
      </div>
      
      <div className="p-6">
        <div className="flex flex-col gap-4 h-64 overflow-y-auto mb-4">
          {messages.map((message) => (
            <div 
              key={message.id} 
              className={`flex gap-3 ${message.isUser ? "justify-end" : ""}`}
            >
              {!message.isUser && (
                <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0">
                  <span className="material-icons text-primary text-sm">smart_toy</span>
                </div>
              )}
              
              <div 
                className={`rounded-lg p-3 max-w-[80%] ${
                  message.isUser 
                    ? "bg-primary/10 text-primary rounded-tr-none" 
                    : "bg-neutral-100 rounded-tl-none text-neutral-500"
                }`}
              >
                <p className={`text-sm ${message.isUser ? "" : "text-neutral-500"}`}>
                  {message.content}
                </p>
                <p className={`text-xs mt-1 ${message.isUser ? "opacity-70" : "text-neutral-400"}`}>
                  {message.timestamp}
                </p>
              </div>
              
              {message.isUser && (
                <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center text-white flex-shrink-0">
                  <span className="text-sm font-medium">JD</span>
                </div>
              )}
            </div>
          ))}
          
          {isLoading && (
            <div className="flex gap-3">
              <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0">
                <span className="material-icons text-primary text-sm">smart_toy</span>
              </div>
              <div className="bg-neutral-100 rounded-lg rounded-tl-none p-3">
                <div className="flex gap-2">
                  <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce" style={{animationDelay: "0.2s"}}></div>
                  <div className="w-2 h-2 bg-primary/50 rounded-full animate-bounce" style={{animationDelay: "0.4s"}}></div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
        
        <form onSubmit={handleSendMessage} className="flex gap-2 mt-4">
          <input 
            type="text" 
            placeholder="Ask your health question..." 
            className="flex-1 border border-neutral-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-primary"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            disabled={isLoading}
          />
          <button 
            type="submit"
            className="bg-primary text-white rounded-lg px-4 py-2 hover:bg-primary/90 transition disabled:opacity-50"
            disabled={isLoading || !newMessage.trim()}
          >
            <span className="material-icons">send</span>
          </button>
        </form>
      </div>
    </Card>
  );
}
